{"title":"Pragmatic.The.Definitive.ANTLR.Reference.May.2007.pdf","uid":5141233,"size":2548557,"categoryP":"other","categoryS":"e_books","magnet":"?xt=urn:btih:2fb8bf5ed5ebab349db3c3dde0d3f03366b72b7d&amp;dn=Pragmatic.The.Definitive.ANTLR.Reference.May.2007.pdf&amp;tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&amp;tr=udp%3A%2F%2Fopen.demonii.com%3A1337&amp;tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&amp;tr=udp%3A%2F%2Fexodus.desync.com%3A6969","seeders":2,"leechers":0,"uploader":null,"files":1,"time":1256946646,"description":"The Definitive ANTLR Reference: Building Domain-Specific Languages\n\nby Terence Parr\n &lt;a href=&quot;\nhttp://pragprog.com/titles/tpantlr/the-definitive-antlr-reference&quot; rel=&quot;nofollow&quot; target=&quot;_NEW&quot;&gt;\nhttp://pragprog.com/titles/tpantlr/the-definitive-antlr-reference&lt;/a&gt;\n\nANTLR is a parser generator: a program that generates code to translate a specified input language into a nice, tidy data structure. You might think that parser generators are only used to build compilers. But in fact, programmers usually use parser generators to build translators and interpreters for domain-specific languages such as proprietary data formats, common network protocols, text processing languages, and domain-specific programming languages.\n\nDomain-specific languages are important to software development because they represent a more natural, high fidelity, robust, and maintainable means of encoding a problem than simply writing software in a general-purpose language. For example, NASA uses domain-specific command languages for space missions to improve reliability, reduce risk, reduce cost, and increase the speed of development. Even the first Apollo guidance control computer from the 1960s used a domain-specific language that supported vector computations.\n\nThis book is the definitive guide to using the completely rebuilt ANTLR v3 and describes all features in detail, including the amazing new LL(*) parsing technology, tree construction facilities, StringTemplate code generation template engine, and sophisticated ANTLRWorks GUI development environment. YouÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ll learn all about ANTLR grammar syntax, resolving grammar ambiguities, parser fault tolerance and error reporting, embedding actions to interpret or translate languages, building intermediate-form trees, extracting information from trees, generating source code, and how to use the ANTLR Java API.\n\nPlease purchase if you enjoyed the book.","torrent":{"xt":"urn:btih:2fb8bf5ed5ebab349db3c3dde0d3f03366b72b7d","amp;dn":"Pragmatic.The.Definitive.ANTLR.Reference.May.2007.pdf","amp;tr":["udp%3A%2F%2Ftracker.openbittorrent.com%3A80","udp%3A%2F%2Fopen.demonii.com%3A1337","udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969","udp%3A%2F%2Fexodus.desync.com%3A6969"],"infoHash":"2fb8bf5ed5ebab349db3c3dde0d3f03366b72b7d","infoHashBuffer":{"type":"Buffer","data":[47,184,191,94,213,235,171,52,157,179,195,221,224,211,240,51,102,183,43,125]},"announce":[],"urlList":[]}}